[package]
name = "webgl-rs-shooter"
version = "0.1.0"
authors = ["Julio Gutierrez"]
edition = "2018"

[lib]
crate-type = ["cdylib"]

[features]
default = ["console_error_panic_hook", "wee_alloc"]

[dependencies]
wasm-bindgen = "0.2.80"
js-sys = "0.3.57"
web-sys = { version = "0.3.57", features = ['console', 'Document', 'Element', 'HtmlElement', 'KeyboardEvent', 'HtmlCanvasElement', 'WebGlBuffer', 'WebGlVertexArrayObject', 'WebGl2RenderingContext', 'WebGlProgram', 'WebGlShader', 'WebGlUniformLocation', 'Window', 'HtmlImageElement', 'WebGlTexture'] }

# The `console_error_panic_hook` rlibcrate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so isn't great for
# code size when deploying.
console_error_panic_hook = { version = "0.1.7", optional = true }

# `wee_alloc` is a tiny allocator for wasm that is only ~1K in code size
# compared to the default allocator's ~10K. It is slower than the default
# allocator, however.
#
# Unfortunately, `wee_alloc` requires nightly Rust when targeting wasm for now.
wee_alloc = { version = "0.4.5", optional = true }

# The builtin js-sys browser random() function causes the application to crash
rand = "0.8.5"
getrandom = { version = "0.2.6", features = ['js'] }

[dev-dependencies]
wasm-bindgen-test = "0.3.30"

[profile.release]
# Tell `rustc` to optimize for small code size.
opt-level = "s"
